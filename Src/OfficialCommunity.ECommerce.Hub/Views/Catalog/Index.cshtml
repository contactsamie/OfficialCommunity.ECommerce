@using OfficialCommunity.ECommerce.Hub.Domains.Editable
@{
    ViewData["Title"] = "catalogs";
    ViewData["Banner"] = null;
}

<div class="content-frame">
    @(Html.Kendo().Grid<EditableCatalogTableEntity>()
          .Name("grid")
          .BindTo((IEnumerable<EditableCatalogTableEntity>)ViewBag.Catalogs)
          .Columns(columns =>
          {
              columns.Bound(c => c.Deleted)
                  .Title("deleted")
                  .Width(100)
                  .Filterable(false)
                  .HtmlAttributes(new { style = "text-align:center;" })
                  .ClientTemplate(
                      "# if (Deleted == true) { #" +
                      "<i class='fa fa-check-square-o fa-2x'>" +
                      "# } else { #" +
                      "<i class='fa fa-square-o fa-2x'>" +
                      "# } #"
                  );
              columns.Bound(c => c.Published)
                  .Title("published")
                  .Width(100)
                  .Filterable(false)
                  .HtmlAttributes(new { style = "text-align:center;" })
                  .ClientTemplate(
                      "# if (Published == true) { #" +
                      "<i class='fa fa-check-square-o fa-2x'>" +
                      "# } else { #" +
                      "<i class='fa fa-square-o fa-2x'>" +
                      "# } #"
                  );
              columns.Bound(p => p.Name).Title("name");
              columns.Bound(p => p.Description).Title("description");
              columns.Bound(p => p.ProviderName).Title("provider");
              columns.Bound(p => p.CreatedUtc)
                  .Title("created")
                  .Format("{0:MM/dd/yyyy}")
                  .Width(125)
                  .Filterable(false)
                  ;
              columns.Bound(p => p.CreatedBy).Title("created by").Width(125).Filterable(false);
              columns.Bound(p => p.LastUpdatedUtc).Title("updated").Format("{0:MM/dd/yyyy}").Width(125).Filterable(false);
              columns.Bound(p => p.LastUpdatedBy).Title("updated by").Width(125).Filterable(false);
              columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
          })
          .Pageable(pager => pager
              .Input(true)
              .Numeric(true)
              .Info(true)
              .PreviousNext(true)
              .Refresh(true)
              .PageSizes(new[] { 25, 50, 100 })
          )
          .Scrollable()
          .Navigatable()
          .Groupable()
          .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
          .ToolBar(toolbar => toolbar.Create())
          .Editable(editable => editable.Mode(GridEditMode.PopUp)
                                         .TemplateName("CatalogCreateOrUpdate")
                                         .Window(w => w.Title("catalog")
                                                        .Name("popup-editor")
                                                        .Width(700)
                                                        //.Height(800)

                                         )
          )
          .Events(events => events.Edit("onEditCatalog")
                                    .Change("onChangeCatalog")
          )
          .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(25)
            .ServerOperation(false)
            .Events(events => events.Error("error_handler"))
            .Sort(sort => sort.Add(s => s.CreatedUtc).Descending())
            .Model(model =>
            {
                model.Id(p => p.Id);
                model.Field(p => p.Id).Editable(false).DefaultValue(Guid.Empty);
                model.Field(p => p.CreatedUtc).Editable(false);
                model.Field(p => p.CreatedBy).Editable(false);
                model.Field(p => p.LastUpdatedUtc).Editable(false);
                model.Field(p => p.LastUpdatedBy).Editable(false);
            })
            .Create(update => update.Action("Create", "Catalog"))
            .Update(update => update.Action("Update", "Catalog"))
            .Destroy(update => update.Action("Delete", "Catalog"))
          )
          .Deferred()
    )
</div>

<script type="text/javascript">

    function onChangeCatalog(e) {
    }

    function onEditCatalog(e) {

        if (e.model.isNew()) {
            $('[name="Name"]').attr("readonly", false);
            $('[name="Description"]').attr("readonly", false);
            $('[name="ProviderName"]').attr("readonly", false);

            $('.k-window-title').text("add catalog");
            $('a.k-button.k-button-icontext.k-primary.k-grid-update').html("<span class='k-icon k-update'></span>Add");
            e.container.find("#catalogShowOnAdd").show();
        } else {
            $('[name="Name"]').attr("readonly", true);
            $('[name="Description"]').attr("readonly", true);
            $('[name="ProviderName"]').attr("readonly", true);

            $('.k-window-title').text("edit catalog [ " + e.model.Name + " ]");
            e.container.find("#catalogShowOnEdit").show();

            // since you can only edit Configuration properties 
            // and we can't tell if the user edited them
            // because they are not part of the original edit form
            // but a secondary grid editor on the form
            // we mark the model as dirty so it gets saved
            e.model.dirty = true;
        }

        var editWindow = e.container.data("kendoWindow");
        if (editWindow) {
            editWindow.center();
        }

        var ds = new kendo.data.DataSource({
            data: e.model.ProviderConfiguration,
            autoSync: true,
            schema: {
                model: {
                    id: "Key",
                    fields: {
                        Key: { editable: false },
                        Value: { }
                    }
                }
            }
        });

        $("#grid-configuration").data("kendoGrid").setDataSource(ds);
        
        // Never worked
        //var editWindow = $("#popup-editor").data("kendoWindow");
        //if (editWindow) {
        //    editWindow.center();
        //}
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>